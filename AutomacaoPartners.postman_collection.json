{
	"info": {
		"_postman_id": "e90dfa55-f995-4399-8bf7-d764bab01891",
		"name": "AutomacaoPartners",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24047493"
	},
	"item": [
		{
			"name": "Login usuario Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"Token\", JSON.parse(responseBody).token)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let MailLogin = pm.environment.get(\"MailAdmin\")\r",
							"let PassLogin =  pm.environment.get(\"PassWordAdmin\")\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"mail\":\"{{MailAdmin}}\",\r\n    \"password\": \"{{PassWordAdmin}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Department",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"jasonData = pm.response.json();\r",
							"idDepartamento2 = pegarDados(jasonData)\r",
							"nameDepartamento2 =pegarDadosName(jasonData)\r",
							"\r",
							"\r",
							"\r",
							"function pegarDados(jasonData){\r",
							"    var idDepartamento = []\r",
							"    var data = jasonData;\r",
							"    console.log(data)\r",
							"    for (let i = 0; i < data.length; i++){\r",
							"        var pega_id = idDepartamento.push(data[i]._id)\r",
							"        console.log(idDepartamento)\r",
							"}\r",
							"return idDepartamento\r",
							"}\r",
							"\r",
							"\r",
							"function pegarDadosName(jasonData){\r",
							"    var nameDepartamento = []\r",
							"    var data = jasonData;\r",
							"    for (let i = 0; i < data.length; i++){\r",
							"        var pega_name = nameDepartamento.push(data[i].departmentName)\r",
							"        console.log(nameDepartamento)\r",
							"}\r",
							"return nameDepartamento\r",
							"\r",
							"}\r",
							"    \r",
							"function RandomizaLista(lista) {\r",
							"    randomItem = lista[Math.floor(Math.random()* lista.length)]\r",
							"    getIndex = lista.indexOf(randomItem)\r",
							"    return getIndex\r",
							"    console.log(getIndex)\r",
							"}\r",
							"\r",
							"let indexId = RandomizaLista(idDepartamento2)\r",
							"console.log(indexId)\r",
							"pm.environment.set(\"idDepartament\", idDepartamento2[indexId])\r",
							"pm.environment.set(\"departmentName\", nameDepartamento2[indexId])\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/department",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"department"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create-Position",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.get(\"idDepartament\")\r",
							"function gerarCargo() {\r",
							"\r",
							"    var cargo = [\"Desenvolvedor\", \"Devops\", \"Agente Administrativo\", \"Tech Recruiter\", \"Analista Comercial\", \"CEO\", \"Product Owner\", \"UX\"];\r",
							"\r",
							"    var randomItem = cargo[Math.floor(Math.random() * cargo.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"let teste = pm.variables.replaceIn('{{$randomJobArea}}')\r",
							"pm.environment.set(\"Cargo\", gerarCargo() + \"\" + teste);\r",
							"\r",
							"\r",
							" "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201- Created\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"let jasonData = pm.response.json();\r",
							"\r",
							"//salvando o id do cargo \r",
							"let idCargo = jasonData.newPosition._id\r",
							"pm.environment.set(\"idCargo\", idCargo);\r",
							"\r",
							"//testando se os valores são correspondentes\r",
							"pm.test(\"Verificando cargo is true\", function(){\r",
							"    pm.expect(pm.variables.get(\"Cargo\")).to.eql(jasonData.newPosition.positionName);\r",
							"});\r",
							"\r",
							"pm.test (\"Verificando departamento is true\", function(){\r",
							"    pm.expect(pm.variables.get(\"idDepartament\")).to.eql(jasonData.newPosition.department);\r",
							"});\r",
							"\r",
							"//Verificando msg\r",
							"pm.test(\"Verificando mensagem de sucesso\",function(){\r",
							"    pm.expect(jasonData.msg).to.eql(\"Cadastro realizado com sucesso.\");\r",
							"});\r",
							"\r",
							"//testes departamento\r",
							"pm.test(\"departamento preenchido\",function(){\r",
							"    pm.expect(jasonData.newPosition.departament).to.not.null;\r",
							"    pm.expect(jasonData.newPosition.departament).to.not.eql(\"\");\r",
							"});\r",
							"\r",
							"//teste cargo\r",
							"pm.test(\"cargo preenchido\",function(){\r",
							"    pm.expect(jasonData.newPosition.positionName).to.not.null;\r",
							"    pm.expect(jasonData.newPosition.positionName).to.not.eql(\"\");\r",
							"});\r",
							"\r",
							"//formato do cargo\r",
							"pm.test(\"Permite letras e &\", function () { \r",
							"     pm.expect(jasonData.newPosition.positionName).to.match(/^[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ&\\s]+$/); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"positionName\": \"{{Cargo}}\",\r\n    \"departmentId\": \"{{idDepartament}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/positions",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Include Position Repeat- Falha",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 409- Conflito\", function(){\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"let jasonData = pm.response.json();\r",
							"\r",
							"\r",
							"//Verificando msg\r",
							"pm.test(\"Verificando se mensagem está correta\",function(){\r",
							"    pm.expect(jasonData.alert[0]).to.eql(\"Não é possível salvar esse registro. Cargo já cadastrado no sistema.\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"positionName\": \"{{Cargo}}\",\r\n    \"departmentId\": \"{{idDepartament}}\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/positions",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions"
					]
				}
			},
			"response": []
		},
		{
			"name": "positionName is empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							"function gerarCargo() {\r",
							"\r",
							"    var cargo = [\"Desenvolvedor\", \"Devops\", \"Agente Administrativo\", \"Tech Recruiter\", \"Analista Comercial\", \"CEO\", \"Product Owner\", \"UX\"];\r",
							"\r",
							"    var randomItem = cargo[Math.floor(Math.random() * cargo.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"Cargo\", gerarCargo()+ \"&\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 400\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"let jasonData = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"//Verificando msg\r",
							"pm.test(\"Verificando mensagem\",function(){\r",
							"    pm.expect(jasonData.error[0]).to.eql(\"O campo 'cargo' é obrigatório.\");\r",
							"});\r",
							"\r",
							"//testes requisição \r",
							"pm.test(\"cargo está vazio\",function(){\r",
							"    var requestBody = pm.request.body.raw; \r",
							"    let cargo = JSON.parse(requestBody).positionName\r",
							"   pm.expect(cargo).to.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"positionName\": \"\",\r\n    \"department\": \"{{departmentName}}\",\r\n    \"departmentId\": \"{{idDepartament}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/positions",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Position of allowing letters and a special character &",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.get(\"departmentName\")\r",
							"pm.variables.get(\"idDepartament\")\r",
							"\r",
							"function gerarCargo() {\r",
							"\r",
							"    var cargo = [\"Desenvolvedor\", \"Devops\", \"Agente Administrativo\", \"Tech Recruiter\", \"Analista Comercial\", \"CEO\", \"Product Owner\", \"UX\"];\r",
							"\r",
							"    var randomItem = cargo[Math.floor(Math.random() * cargo.length)];\r",
							"\r",
							"    return randomItem;\r",
							"    console.log(randomItem)\r",
							"}\r",
							"\r",
							"pm.environment.set(\"Cargo\", gerarCargo());\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 400\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"let jasonData = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"//Verificando msg\r",
							"pm.test(\"Verificando mensagem\",function(){\r",
							"    pm.expect(jasonData.error[0]).to.eql(\"O campo 'cargo' só pode conter letras e o caractere especial '&'.\");\r",
							"});\r",
							"\r",
							"//testes requisição \r",
							"pm.test(\"campo de teste ok\",function(){\r",
							"    var requestBody = pm.request.body.raw; \r",
							"    let cargo = JSON.parse(requestBody).positionName\r",
							"   pm.expect(cargo).to.be.not.match(/^[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ&\\s]+$/); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"positionName\": \"{{Cargo}}%1\",\r\n     \"department\": \"{{departmentName}}\",\r\n    \"departmentId\": \"{{idDepartament}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/positions",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions"
					]
				}
			},
			"response": []
		},
		{
			"name": "PositionName must allow a maximum of 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.get(\"departmentName\")\r",
							"pm.variables.get(\"idDepartament\")\r",
							"\r",
							"function gerarCargo() {\r",
							"\r",
							"    var cargo = [\"Desenvolvedor\", \"Devops\", \"Agente Administrativo\", \"Tech Recruiter\", \"Analista Comercial\", \"CEO\", \"Product Owner\", \"UX\"];\r",
							"\r",
							"    var randomItem = cargo[Math.floor(Math.random() * cargo.length)];\r",
							"\r",
							"    return randomItem;\r",
							"    console.log(randomItem)\r",
							"}\r",
							"\r",
							"pm.environment.set(\"Cargo\", gerarCargo());\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 400\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"let jasonData = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"//Verificando msg\r",
							"pm.test(\"Verificando mensagem\",function(){\r",
							"    pm.expect(jasonData.error[0]).to.eql(\"O campo 'cargo' deve possuir no máximo 50 caracteres.\");\r",
							"});\r",
							"\r",
							"//testes requisição \r",
							"pm.test(\"campo de teste ok\",function(){\r",
							"    var requestBody = pm.request.body.raw; \r",
							"    let cargo = JSON.parse(requestBody).positionName\r",
							"   pm.expect(cargo.length > 50) \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"positionName\":\"fkfjdidosdfhioirufhjndjfjoforifoiodsfkjsdkfjureiwuefhuf\",\r\n     \"department\": \"{{departmentName}}\",\r\n    \"departmentId\": \"{{idDepartament}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/positions",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions"
					]
				}
			},
			"response": []
		},
		{
			"name": "positionName is null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.get(\"departmentName\")\r",
							"pm.variables.get(\"idDepartament\")\r",
							"\r",
							"function gerarCargo() {\r",
							"\r",
							"    var cargo = [\"Desenvolvedor\", \"Devops\", \"Agente Administrativo\", \"Tech Recruiter\", \"Analista Comercial\", \"CEO\", \"Product Owner\", \"UX\"];\r",
							"\r",
							"    var randomItem = cargo[Math.floor(Math.random() * cargo.length)];\r",
							"\r",
							"    return randomItem;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"Cargo\", gerarCargo());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 400\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"let jasonData = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"//Verificando msg\r",
							"pm.test(\"Verificando mensagem\",function(){\r",
							"    pm.expect(jasonData.error[0]).to.eql(\"O campo 'cargo' é obrigatório.\");\r",
							"});\r",
							"\r",
							"//testes requisição do departamento\r",
							"pm.test(\"cargo está nulo\",function(){\r",
							"    var requestBody = pm.request.body.raw; \r",
							"    let cargo = JSON.parse(requestBody).positionName\r",
							"    pm.expect(cargo).to.null;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"positionName\": null,\r\n    \"department\": \"{{departmentName}}\",\r\n    \"departmentId\": \"{{idDepartament}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/positions",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show-Position",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verifica se apresenta a lista de Cargos\", function(){\r",
							"    pm.expect(pm.response.json().positions[0])\r",
							"});\r",
							"\r",
							"let tamanho = []\r",
							"tamanho = pm.response.json().positions.length\r",
							"pm.environment.set(\"tamanhoListaCargos\", tamanho)\r",
							"\r",
							"console.log(tamanho)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/positions",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Count-Position",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"jasonData = pm.response.json()\r",
							"pm.environment.set(\"Count\", jasonData.count )\r",
							"\r",
							"/*\r",
							"pm.test(\"Verificando se count tem o tamanho correto\", function(){\r",
							"   pm.expect(pm.variables.get(\"tamanhoListaCargos\")).to.eql(jasonData.count)\r",
							"});\r",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"tamanhoListaCargos\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/positions/count",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions",
						"count"
					]
				}
			},
			"response": []
		},
		{
			"name": "Index-Position",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.get(\"idCargo\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"jasonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Verificando se id is true\", function(){\r",
							"   pm.expect(pm.variables.get(\"idCargo\")).to.eql(jasonData.position._id)\r",
							"});\r",
							"\r",
							"pm.environment.set(\"Cargo\", jasonData.position.positionName)\r",
							"pm.environment.set(\"idCargo\", jasonData.position._id)\r",
							"pm.environment.set(\"idDepartament\", jasonData.position.department._id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/positions/{{idCargo}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions",
						"{{idCargo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update-Position",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let cargoantigo = pm.variables.get(\"Cargo\")\r",
							"\r",
							"pm.environment.set(\"CargoAtualizar\", cargoantigo + \"Test&\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"jasonData=pm.response.json();\r",
							"\r",
							"pm.test(\"Verificando mensagem\", function(){\r",
							"    pm.expect(jasonData.msg).to.equal(\"Cadastro atualizado com sucesso!\")\r",
							"});\r",
							"\r",
							"pm.test(\"Verificando se cargo foi atualizado\", function(){\r",
							"    pm.expect(jasonData.updatedPosition.positionName).to.equal(pm.variables.get(\"CargoAtualizar\"))\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"positionName\": \"{{CargoAtualizar}}\",\r\n    \"departmentId\": \"{{idDepartament}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/positions/{{idCargo}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions",
						"{{idCargo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update - positionName is empty",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.get(\"idDepartament\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 400\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"jasonData = pm.response.json();\r",
							"pm.test(\"Verificando mensagem\", function(){\r",
							"    pm.expect(jasonData.error[0]).to.equal(\"O campo 'cargo' é obrigatório.\")\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"positionName\": \" \",\r\n    \"departmentId\": \"{{idDepartament}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/positions/{{idCargo}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions",
						"{{idCargo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update - positionName is null",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.get(\"idDepartament\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 400\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"jasonData = pm.response.json();\r",
							"pm.test(\"Verificando mensagem\", function(){\r",
							"    pm.expect(jasonData.error[0]).to.equal(\"O campo 'cargo' é obrigatório.\")\r",
							"});\r",
							"\r",
							"//testes requisição do departamento\r",
							"pm.test(\" cargo está nulo\",function(){\r",
							"    var requestBody = pm.request.body.raw; \r",
							"    let cargo = JSON.parse(requestBody).positionName\r",
							"    pm.expect(cargo).to.null;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"positionName\": null,\r\n    \"departmentId\": \"{{idDepartament}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/positions/{{idCargo}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions",
						"{{idCargo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update - Position of allowing letters and a special character &",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.get(\"idDepartament\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 400\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"jasonData = pm.response.json();\r",
							"pm.test(\"Verificando mensagem\", function(){\r",
							"    pm.expect(jasonData.error[0]).to.equal(\"O campo 'cargo' só pode conter letras e o caractere especial '&'.\")\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"positionName\": \"{{Cargo}}%1\",\r\n    \"departmentId\": \"{{idDepartament}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/positions/{{idCargo}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions",
						"{{idCargo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update - PositionName must allow a maximum of 50 characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.get(\"idDepartament\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 400\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"jasonData = pm.response.json();\r",
							"pm.test(\"Verificando mensagem\", function(){\r",
							"    pm.expect(jasonData.error[0]).to.equal(\"O campo 'cargo' deve possuir no máximo 50 caracteres.\")\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"positionName\": \"fkfjdidosdfhioirufhjndjfjoforifoiodsfkjsdkfjureiwuefhuf\",\r\n    \"departmentId\": \"{{idDepartament}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/positions/{{idCargo}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions",
						"{{idCargo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update-Status-Position",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"idCargo\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200-Solicitação bem sucedida\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//testando msg\r",
							"pm.test (\"Verificando mensagem de sucesso\", function(){\r",
							"    pm.expect(\"Cargo inativado com sucesso!\").to.eql(JSON.parse(responseBody).msg);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/positions/{{idCargo}}/inactivate",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions",
						"{{idCargo}}",
						"inactivate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete-Position",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"idCargo\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202-Solicitação aceita\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});\r",
							"\r",
							"//testando msg\r",
							"pm.test (\"Verificando mensagem de sucesso\", function(){\r",
							"    pm.expect(\"Cargo removido com sucesso!\").to.eql(JSON.parse(responseBody).msg);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/api/positions/{{idCargo}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"positions",
						"{{idCargo}}"
					]
				}
			},
			"response": []
		}
	]
}